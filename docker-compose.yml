services:
  postgres_db:
    build:
      context: ./Database
      dockerfile: Dockerfile
    container_name: desd-aai-y3-group10-database-1
    # restart: always
    environment:
      POSTGRES_DB: insurance_ai
      POSTGRES_USER: user
      #TODO - Use .env file, shared secrets or other method of obfuscating password
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root"]
      interval: 10s
      retries: 5
      start_period: 30s

  mlaas:
    build:
      context: ./MLaaS
      dockerfile: Dockerfile
    container_name: desd-aai-y3-group10-mlaas-1
    # restart: always
    depends_on:
      postgres_db:
        condition: service_healthy
    volumes:
      - ./MLaaS:/app
      - mlaas_media:/app/media # Persistent storage for ML models
    # ports:
    #   - "8009:8009" # Expose MLaaS API port
    environment:
      - DEBUG=True
      - ALLOWED_HOSTS=mlaas,localhost,127.0.0.1
      - DATABASE_NAME=insurance_ai
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_HOST=postgres_db
      - DATABASE_PORT=5432
      - SECRET_KEY=mlaas-secure-key-change-in-production

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: desd-aai-y3-group10-backend-1
    # restart: always
    depends_on:
      postgres_db:
        condition: service_healthy # Wait for PostgreSQL to be ready
      mlaas:
        condition: service_started # Wait for MLaaS service to start
    volumes:
      ## - ./Backend:/app
      - static_volume:/app/staticfiles
      # - /var/run/docker.sock:/var/run/docker.sock
    # ports:
    #   - "8000:8000"
    environment:
      - ALLOWED_HOSTS=frontend,mlaas,localhost,127.0.0.1
      - DJANGO_SETTINGS_MODULE=insurance_ai.settings
      - DATABASE_NAME=insurance_ai
      - DATABASE_USER=user
      #TODO - Use .env file, shared secrets or other method of obfuscating password
      - DATABASE_PASSWORD=password
      - DATABASE_HOST=postgres_db
      - DATABASE_PORT=5432
      - MLAAS_SERVICE_URL=http://mlaas:8009/api/
    command: >
      sh -c "python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 4 insurance_ai.wsgi:application"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/accounts/login/"]
      interval: 10s
      timeout: 5s
      retries: 5

    # command: >
    #   sh -c "python manage.py migrate &&
    #          python manage.py loaddata default_users.json || python manage.py create_test_users || true &&
    #          python manage.py runserver 0.0.0.0:8000"

  frontend:
    build: ./Frontend
    container_name: desd-aai-y3-group10-frontend-1
    # restart: always
    ports:
      - "8080:8080" # Expose Nginx on port 8080
    #TODO switch over to HTTPS in production
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles # Match Django's static path
    # command: ["nginx", "-g", "daemon off;"]

volumes:
  postgres_data:
    # This volume is used to persist the PostgreSQL data to the local filesystem
    # This is ok for development and testing purposes but in production
    # a centralised database solution would be utilised
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./Database/postgres_data

  mlaas_media:
    # This volume is used to persist the ML models to the local filesystem
    # temporary solution until models are stored in the database
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./MLaaS/media

  static_volume:
    # This is used to ensure that the static files generated by Django are served by Nginx
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./staticfiles # Bind to host directory
