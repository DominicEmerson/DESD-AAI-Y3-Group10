services:
  postgres_db:
    image: postgres:latest
    container_name: desd-aai-y3-group10-database-1
    restart: always
    environment:
      POSTGRES_DB: insurance_ai
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password         # ← move to .env in future
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data        # Docker-managed
      - ./init:/docker-entrypoint-initdb.d            # auto-import SQL
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "insurance_ai"]
      interval: 10s
      retries: 5
      start_period: 30s

  mlaas:
    build:
      context: ./MLaaS
      dockerfile: Dockerfile
    container_name: desd-aai-y3-group10-mlaas-1
    depends_on:
      postgres_db:
        condition: service_healthy
   
    environment:
      - DEBUG=True
      - ALLOWED_HOSTS=mlaas,localhost,127.0.0.1
      - DATABASE_NAME=insurance_ai
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_HOST=postgres_db
      - DATABASE_PORT=5432
      - SECRET_KEY=mlaas-secure-key-change-in-production
    ports:
      - "8009:8009"

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: desd-aai-y3-group10-backend-1
    depends_on:
      postgres_db:
        condition: service_healthy
      mlaas:
        condition: service_started
    volumes:
      - ./Backend:/app                           # ← NEW: mount source code
      - static_volume:/app/staticfiles
    environment:
      - ALLOWED_HOSTS=frontend,mlaas,localhost,127.0.0.1
      - DJANGO_SETTINGS_MODULE=insurance_ai.settings
      - DATABASE_NAME=insurance_ai
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_HOST=postgres_db
      - DATABASE_PORT=5432
      - MLAAS_SERVICE_URL=http://mlaas:8009/api/
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 insurance_ai.wsgi:application"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/accounts/login/"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build: ./Frontend
    container_name: desd-aai-y3-group10-frontend-1
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - static_volume:/app/staticfiles

volumes:
  postgres_data: {}        # Docker-managed Postgres data


  static_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./staticfiles
