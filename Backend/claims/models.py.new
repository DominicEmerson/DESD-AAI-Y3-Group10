# claims/models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone

INJURY_DESCRIPTION_CHOICES = [
    ('Whiplash and minor bruises', 'Whiplash and minor bruises'),
    ('Concussion and bruised ribs', 'Concussion and bruised ribs'),
    ('Minor cuts and scrapes', 'Minor cuts and scrapes'),
    ('Fractured arm and leg', 'Fractured arm and leg'),
    ('Sprained ankle and wrist', 'Sprained ankle and wrist'),
    ('Unknown', 'Unknown')
]

DOMINANT_INJURY_CHOICES = [
    ('Legs', 'Legs'),
    ('Arms', 'Arms'),
    ('Hips', 'Hips'),
    ('Multiple', 'Multiple')
]

VEHICLE_TYPE_CHOICES = [
    ('Motorcycle', 'Motorcycle'),
    ('Car', 'Car'),
    ('Truck', 'Truck')
]

ACCIDENT_TYPE_CHOICES = [
    ('Rear end', 'Rear end'),
    ('Other side pulled out of side road', 'Other side pulled out of side road'),
    ('Other side pulled on to roundabout', 'Other side pulled on to roundabout'),
    ('Other side reversed into Clt\'s vehicle', 'Other side reversed into Clt\'s vehicle'),
    ('Other side changed lanes and collided with clt\'s vehicle', 'Other side changed lanes and collided with clt\'s vehicle'),
    ('Unknown', 'Unknown')
]

ACCIDENT_DESCRIPTION_CHOICES = [
    ('Side collision at an intersection.','Side collision at an intersection.'),
    ('Rear-ended at a stoplight.', 'Rear-ended at a stoplight.'),
    ('Swerved to avoid another vehicle.', 'Swerved to avoid another vehicle.'),
    ('Hit a deer on the highway.', 'Hit a deer on the highway.'),
    ('Hit a deer on the highway.', 'Hit a deer on the highway.'),
    ('Swerved to avoid another vehicle.', 'Swerved to avoid another vehicle.'),
    ('Side collision at an intersection.', 'Side collision at an intersection.'),
    ('Side collision at an intersection.', 'Side collision at an intersection.'),
    ('Swerved to avoid another vehicle.', 'Swerved to avoid another vehicle.'),
    ('Lost control on a snowy road.', 'Lost control on a snowy road.'),
    ('Unknown', 'Unknown')
]

WEATHER_CONDITIONS_CHOICES = [
    ('Sunny', 'Sunny'),
    ('Rainy', 'Rainy'),
    ('Snowy', 'Snowy'),
]

class Accident(models.Model):
    """
    Represents an accident reported by a user, including key details
    such as date, type, and any police reports or witnesses.
    """
    reported_by = models.ForeignKey(
        'authentication.CustomUser',
        on_delete=models.CASCADE,
        related_name='accidents'
    )
    accident_date = models.DateTimeField(default=timezone.now)
    accident_type = models.CharField(
        max_length=255,
        choices=ACCIDENT_TYPE_CHOICES
    )
    accident_description = models.CharField(
        max_length=255,
        choices=ACCIDENT_DESCRIPTION_CHOICES
    )
    police_report_filed = models.BooleanField(default=False)
    witness_present = models.BooleanField(default=False)
    weather_conditions = models.CharField(
        max_length=255,
        choices=WEATHER_CONDITIONS_CHOICES
    )

class Claim(models.Model):
    """
    Represents an insurance claim linked to a particular accident.
    Stores financial details and, optionally, a prediction result
    from an external MLaaS service.
    """
    accident = models.OneToOneField(
        Accident,
        on_delete=models.CASCADE,
        primary_key=True
    )
    claim_date = models.DateTimeField(default=timezone.now)
    settlementvalue = models.DecimalField(
        max_digits=12,
        decimal_places=2,
        default=0.0,
        validators=[MinValueValidator(0.0), MaxValueValidator(100000000)]
    )
    injuryprognosis = models.PositiveSmallIntegerField(
        validators=[MaxValueValidator(60)],
        default=0
    )
    injurydescription = models.CharField(
        max_length=100,
        choices=INJURY_DESCRIPTION_CHOICES
    )
    dominantinjury = models.CharField(
        max_length=50,
        choices=DOMINANT_INJURY_CHOICES
    )
    whiplash = models.BooleanField(default=False)
    minorpsychologicalinjury = models.BooleanField(default=False)
    exceptionalcircumstances = models.BooleanField(default=False)
    # ... other financial fields with default=0.0 and validators ...

class Vehicle(models.Model):
    accident = models.OneToOneField(
        Accident,
        on_delete=models.CASCADE,
        primary_key=True
    )
    vehicleage = models.PositiveSmallIntegerField(
        validators=[MaxValueValidator(100)],
        default=0
    )
    vehicletype = models.CharField(
        max_length=50,
        choices=VEHICLE_TYPE_CHOICES
    )
    numberofpassengers = models.PositiveSmallIntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(12)],
        default=1
    )

class Driver(models.Model):
    accident = models.OneToOneField(
        Accident,
        on_delete=models.CASCADE,
        primary_key=True
    )
    driverage = models.PositiveSmallIntegerField(
        validators=[MinValueValidator(16), MaxValueValidator(100)],
        default=16
    )
    gender = models.CharField(
        max_length=10,
        choices=[("Male", "Male"), ("Female", "Female"), ("Other", "Other")],
        default="Other"
    )

class Injury(models.Model):
    """
    Represents injuries sustained in an accident. Each Injury entry
    captures the type, prognosis, and any special conditions.
    """
    accident = models.ForeignKey(
        Accident,
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )
    injury_prognosis = models.CharField(max_length=255, blank=True, null=True)
    injury_description = models.TextField(blank=True, null=True)
    dominant_injury = models.CharField(max_length=255, blank=True, null=True)
    whiplash = models.BooleanField(default=False)
    minor_psychological_injury = models.BooleanField(default=False)
    exceptional_circumstances = models.BooleanField(default=False)

    def __str__(self):
        return f"Injury {self.id} - {self.dominant_injury if self.dominant_injury else 'Unknown'}"
